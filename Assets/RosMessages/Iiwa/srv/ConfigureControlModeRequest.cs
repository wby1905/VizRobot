//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Iiwa
{
    [Serializable]
    public class ConfigureControlModeRequest : Message
    {
        public const string k_RosMessageName = "iiwa_msgs/ConfigureControlMode";
        public override string RosMessageName => k_RosMessageName;

        //  This service allows to set a control mode at runtime.
        //  The user can select control modes defined in iiwa_msgs/ControlMode and set the respective parameters accordingly to the selected mode.
        public int control_mode;
        public JointImpedanceControlModeMsg joint_impedance;
        public CartesianImpedanceControlModeMsg cartesian_impedance;
        public DesiredForceControlModeMsg desired_force;
        public SinePatternControlModeMsg sine_pattern;
        public CartesianControlModeLimitsMsg limits;

        public ConfigureControlModeRequest()
        {
            this.control_mode = 0;
            this.joint_impedance = new JointImpedanceControlModeMsg();
            this.cartesian_impedance = new CartesianImpedanceControlModeMsg();
            this.desired_force = new DesiredForceControlModeMsg();
            this.sine_pattern = new SinePatternControlModeMsg();
            this.limits = new CartesianControlModeLimitsMsg();
        }

        public ConfigureControlModeRequest(int control_mode, JointImpedanceControlModeMsg joint_impedance, CartesianImpedanceControlModeMsg cartesian_impedance, DesiredForceControlModeMsg desired_force, SinePatternControlModeMsg sine_pattern, CartesianControlModeLimitsMsg limits)
        {
            this.control_mode = control_mode;
            this.joint_impedance = joint_impedance;
            this.cartesian_impedance = cartesian_impedance;
            this.desired_force = desired_force;
            this.sine_pattern = sine_pattern;
            this.limits = limits;
        }

        public static ConfigureControlModeRequest Deserialize(MessageDeserializer deserializer) => new ConfigureControlModeRequest(deserializer);

        private ConfigureControlModeRequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.control_mode);
            this.joint_impedance = JointImpedanceControlModeMsg.Deserialize(deserializer);
            this.cartesian_impedance = CartesianImpedanceControlModeMsg.Deserialize(deserializer);
            this.desired_force = DesiredForceControlModeMsg.Deserialize(deserializer);
            this.sine_pattern = SinePatternControlModeMsg.Deserialize(deserializer);
            this.limits = CartesianControlModeLimitsMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.control_mode);
            serializer.Write(this.joint_impedance);
            serializer.Write(this.cartesian_impedance);
            serializer.Write(this.desired_force);
            serializer.Write(this.sine_pattern);
            serializer.Write(this.limits);
        }

        public override string ToString()
        {
            return "ConfigureControlModeRequest: " +
            "\ncontrol_mode: " + control_mode.ToString() +
            "\njoint_impedance: " + joint_impedance.ToString() +
            "\ncartesian_impedance: " + cartesian_impedance.ToString() +
            "\ndesired_force: " + desired_force.ToString() +
            "\nsine_pattern: " + sine_pattern.ToString() +
            "\nlimits: " + limits.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
