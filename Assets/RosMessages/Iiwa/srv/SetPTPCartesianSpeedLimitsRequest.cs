//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Iiwa
{
    [Serializable]
    public class SetPTPCartesianSpeedLimitsRequest : Message
    {
        public const string k_RosMessageName = "iiwa_msgs/SetPTPCartesianSpeedLimits";
        public override string RosMessageName => k_RosMessageName;

        //  This service allows to set the speed limits for cartesian PTP motions.
        //  Set the parameters you do not want to set to -1 to ignore them.
        //  Maximum translational speed in m/s
        public double maxCartesianVelocity;
        //  Maximum rotational speed in rad/s
        public double maxOrientationVelocity;
        //  Maximum translational acceleration in m/s^2
        public double maxCartesianAcceleration;
        //  Maximum rotational acceleration in rad/s^2
        public double maxOrientationAcceleration;
        //  Maximum allowed translational jerk in m/s^3
        public double maxCartesianJerk;
        //  Maximum allowed rotational jerk in rad/s^3
        public double maxOrientationJerk;

        public SetPTPCartesianSpeedLimitsRequest()
        {
            this.maxCartesianVelocity = 0.0;
            this.maxOrientationVelocity = 0.0;
            this.maxCartesianAcceleration = 0.0;
            this.maxOrientationAcceleration = 0.0;
            this.maxCartesianJerk = 0.0;
            this.maxOrientationJerk = 0.0;
        }

        public SetPTPCartesianSpeedLimitsRequest(double maxCartesianVelocity, double maxOrientationVelocity, double maxCartesianAcceleration, double maxOrientationAcceleration, double maxCartesianJerk, double maxOrientationJerk)
        {
            this.maxCartesianVelocity = maxCartesianVelocity;
            this.maxOrientationVelocity = maxOrientationVelocity;
            this.maxCartesianAcceleration = maxCartesianAcceleration;
            this.maxOrientationAcceleration = maxOrientationAcceleration;
            this.maxCartesianJerk = maxCartesianJerk;
            this.maxOrientationJerk = maxOrientationJerk;
        }

        public static SetPTPCartesianSpeedLimitsRequest Deserialize(MessageDeserializer deserializer) => new SetPTPCartesianSpeedLimitsRequest(deserializer);

        private SetPTPCartesianSpeedLimitsRequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.maxCartesianVelocity);
            deserializer.Read(out this.maxOrientationVelocity);
            deserializer.Read(out this.maxCartesianAcceleration);
            deserializer.Read(out this.maxOrientationAcceleration);
            deserializer.Read(out this.maxCartesianJerk);
            deserializer.Read(out this.maxOrientationJerk);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.maxCartesianVelocity);
            serializer.Write(this.maxOrientationVelocity);
            serializer.Write(this.maxCartesianAcceleration);
            serializer.Write(this.maxOrientationAcceleration);
            serializer.Write(this.maxCartesianJerk);
            serializer.Write(this.maxOrientationJerk);
        }

        public override string ToString()
        {
            return "SetPTPCartesianSpeedLimitsRequest: " +
            "\nmaxCartesianVelocity: " + maxCartesianVelocity.ToString() +
            "\nmaxOrientationVelocity: " + maxOrientationVelocity.ToString() +
            "\nmaxCartesianAcceleration: " + maxCartesianAcceleration.ToString() +
            "\nmaxOrientationAcceleration: " + maxOrientationAcceleration.ToString() +
            "\nmaxCartesianJerk: " + maxCartesianJerk.ToString() +
            "\nmaxOrientationJerk: " + maxOrientationJerk.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
