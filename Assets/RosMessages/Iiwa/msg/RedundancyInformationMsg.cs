//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Iiwa
{
    [Serializable]
    public class RedundancyInformationMsg : Message
    {
        public const string k_RosMessageName = "iiwa_msgs/RedundancyInformation";
        public override string RosMessageName => k_RosMessageName;

        //  E1 parameter
        //  Specifies Angle of the elbow joint.
        public double e1;
        //  Status parameter
        //    Bit 0: 1 - The robot is working above its head
        //           0 - The robot is working in the ground area
        //    Bit 1: 1 - Angle A4 < 0°
        //           0 - Angle A4 >= 0°
        //    Bit 2: 1 - Angle A6 <= 0
        //           0 - Angle A6 > 0
        public int status;
        //  Turn parameter
        //  According to Sunrise handbook this is not used for the iiwa.
        public int turn;

        public RedundancyInformationMsg()
        {
            this.e1 = 0.0;
            this.status = 0;
            this.turn = 0;
        }

        public RedundancyInformationMsg(double e1, int status, int turn)
        {
            this.e1 = e1;
            this.status = status;
            this.turn = turn;
        }

        public static RedundancyInformationMsg Deserialize(MessageDeserializer deserializer) => new RedundancyInformationMsg(deserializer);

        private RedundancyInformationMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.e1);
            deserializer.Read(out this.status);
            deserializer.Read(out this.turn);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.e1);
            serializer.Write(this.status);
            serializer.Write(this.turn);
        }

        public override string ToString()
        {
            return "RedundancyInformationMsg: " +
            "\ne1: " + e1.ToString() +
            "\nstatus: " + status.ToString() +
            "\nturn: " + turn.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
